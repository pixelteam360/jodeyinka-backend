generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  password         String
  fullName         String
  image            String?        @default("")
  location         String?        @default("")
  phoneNumber      String?        @default("")
  reviews          Int?           @default(0)
  role             UserRole?      @default(USER)
  lat              Float?         @default(0)
  lng              Float?         @default(0)
  isDeleted        Boolean        @default(false)
  expirationOtp    DateTime?
  otp              Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  avgRating        Float?         @default(0)
  Rating           Rating[]
  DriverProfile    DriverProfile?
  Profile          Profile?
  sentRooms        Room[]         @relation("RoomSender")
  receivedRooms    Room[]         @relation("RoomReceiver")
  sentMessages     Chat[]         @relation("ChatSender")
  receivedMessages Chat[]         @relation("ChatReceiver")
  AdminPayment     AdminPayment[]

  @@map("Users")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  message   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("Service-Rating")
}

model Profile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  country       String
  state         String
  city          String
  driverCanHire Int
  createdAt     DateTime @default(now())
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])

  @@map("Profile")
}

model DriverProfile {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  email            String
  photo            String
  monthlyRate      Float        @default(0)
  about            String       @default("")
  drivingLicense   String
  country          String
  state            String
  referenceNumber1 String
  referenceNumber2 String
  referenceEmail1  String
  referenceEmail2  String
  createdAt        DateTime     @default(now())
  userId           String       @unique @db.ObjectId
  user             User         @relation(fields: [userId], references: [id])
  Experience       Experience[]

  @@map("Driver-Profile")
}

model Experience {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  company         String
  position        String
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  userId          String        @db.ObjectId
  driverProfileId String        @db.ObjectId
  driverProfile   DriverProfile @relation(fields: [driverProfileId], references: [id])

  @@map("Experience")
}

model AdminPayment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  PaymentFor PaymentFor
  paymentId String?   
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])

  @@map("Admin-Payment")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("RoomSender", fields: [senderId], references: [id])
  receiver   User     @relation("RoomReceiver", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("Rooms")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  images     String?  @default("")
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  roomId     String   @db.ObjectId
  sender     User     @relation("ChatSender", fields: [senderId], references: [id])
  receiver   User     @relation("ChatReceiver", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("Chats")
}

enum UserRole {
  ADMIN
  USER
  EMPLOYER
  AGENT
  DRIVER
}

enum PaymentFor {
  DRIVER_SALARY
  DRIVER_HIRE
}
