generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  email              String           @unique
  password           String
  fullName           String
  image              String?          @default("")
  reviews            Int?             @default(0)
  avgRating          Int?             @default(0)
  stripeAccountId    String?          @default("")
  completedProfile   Boolean?         @default(false)
  role               UserRole
  lat                Float?           @default(0)
  lng                Float?           @default(0)
  verifiedEmail      Boolean          @default(false)
  isDeleted          Boolean          @default(false)
  expirationOtp      DateTime?
  otp                Int?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  DriverProfile      DriverProfile?
  Profile            Profile?
  receivedRating     UserRating[]     @relation("receiverRating")
  sendedRating       UserRating[]     @relation("senderRating")
  sentRooms          Room[]           @relation("RoomSender")
  receivedRooms      Room[]           @relation("RoomReceiver")
  sentMessages       Chat[]           @relation("ChatSender")
  receivedMessages   Chat[]           @relation("ChatReceiver")
  hiringSender       DriverHire[]     @relation("hiringSender")
  hiringReceiver     DriverHire[]     @relation("hiringReceiver")
  reviewsViewed      AdminPayment[]   @relation("ReviewerPayments")
  reviewsReceived    AdminPayment[]   @relation("ReviewOwnerPayments")
  bookmarksMade      BookMarkDriver[] @relation("BookmarkedByUser")
  bookmarkedAsDriver BookMarkDriver[] @relation("BookmarkedDriver")
  UserReference      UserReference[]
  Job                Job[]
  JobApplication     JobApplication[]
  senderPayment      Payment[]        @relation("PaymentSender")
  receiverPayment    Payment[]        @relation("PaymentReceiver")

  @@map("Users")
}

model UserReference {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  @@map("User-Reference")
}

model Profile {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  driverCanHire           Int      @default(0)
  companyName             String
  fullName                String
  address                 String
  state                   String
  city                    String
  country                 String
  gender                  String
  age                     Int
  dateOfBirth             DateTime
  phoneNumber             String
  salaryRange             String
  typeOfVehicleOwned      String
  hiredDriverBefore       Boolean
  driverPaymentMethod     String
  driverGiniPaymentMethod String
  about                   String   @default("")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  String   @unique @db.ObjectId
  user                    User     @relation(fields: [userId], references: [id])

  @@map("Profile")
}

model DriverProfile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  hired          Boolean      @default(false)
  monthlyRate    String
  fullName       String
  address        String
  state          String
  city           String
  country        String
  gender         String
  age            Int
  dateOfBirth    DateTime
  drivingLicense String
  typeOfVehicle  String
  salaryRange    String
  about          String       @default("")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String       @unique @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  Experience     Experience[]

  @@map("Driver-Profile")
}

model UserRating {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  message    String
  createdAt  DateTime @default(now())
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("senderRating", fields: [senderId], references: [id])
  receiver   User     @relation("receiverRating", fields: [receiverId], references: [id])

  @@map("User-Rating")
}

model Experience {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  company         String
  position        String
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  driverProfileId String        @db.ObjectId
  driverProfile   DriverProfile @relation(fields: [driverProfileId], references: [id])

  @@map("Experience")
}

model AdminPayment {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  PaymentFor PaymentFor
  paymentId  String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reviewerId    String  @db.ObjectId
  reviewOwnerId String? @db.ObjectId

  reviewer    User  @relation("ReviewerPayments", fields: [reviewerId], references: [id])
  reviewOwner User? @relation("ReviewOwnerPayments", fields: [reviewOwnerId], references: [id])

  @@map("Admin-Payment")
}

model DriverHire {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  offerAmount    Float
  aboutOffer     String
  adminApproved  Boolean          @default(false)
  status         HiringStatus     @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  driverId       String           @db.ObjectId
  user           User             @relation("hiringSender", fields: [userId], references: [id])
  driver         User             @relation("hiringReceiver", fields: [driverId], references: [id])
  monthlyPayment monthlyPayment[]

  @@map("Driver-Hire")
}

model Job {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  hiringType     HiringType
  location       String
  amount         String
  status         JobStatus        @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  JobApplication JobApplication[]

  @@map("Job")
}

model JobApplication {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  about          String
  adminApproved  Boolean          @default(false)
  status         HiringStatus     @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String           @db.ObjectId
  user           User             @relation(fields: [userId], references: [id])
  jobId          String           @db.ObjectId
  job            Job              @relation(fields: [jobId], references: [id])
  monthlyPayment monthlyPayment[]

  @@map("Job-Application")
}

model BookMarkDriver {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  driverId  String   @db.ObjectId
  user      User     @relation("BookmarkedByUser", fields: [userId], references: [id])
  driver    User     @relation("BookmarkedDriver", fields: [driverId], references: [id])

  @@map("BookMark-Driver")
}

model monthlyPayment {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  date             DateTime
  status           PaymentStatus   @default(UNPAID)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  JobApplication   JobApplication? @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId String?         @db.ObjectId
  DriverHire       DriverHire?     @relation(fields: [driverHireId], references: [id])
  driverHireId     String?         @db.ObjectId
  Payment          Payment?

  @@map("Unit-Payment")
}

model Payment {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  paymentIntentId  String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  sender           User           @relation("PaymentSender", fields: [senderId], references: [id])
  senderId         String         @db.ObjectId
  receiver         User           @relation("PaymentReceiver", fields: [receiverId], references: [id])
  receiverId       String         @db.ObjectId
  monthlyPayment   monthlyPayment @relation(fields: [monthlyPaymentId], references: [id])
  monthlyPaymentId String         @unique @db.ObjectId

  @@map("Payments")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("RoomSender", fields: [senderId], references: [id])
  receiver   User     @relation("RoomReceiver", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("Rooms")
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  images     String?  @default("")
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  roomId     String   @db.ObjectId
  sender     User     @relation("ChatSender", fields: [senderId], references: [id])
  receiver   User     @relation("ChatReceiver", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("Chats")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EMPLOYER
  AGENT
  DRIVER
}

enum PaymentFor {
  DRIVER_SALARY
  DRIVER_HIRE
  REVIEW
}

enum HiringStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum JobStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum HiringType {
  DRIVER
  AGENT
}

enum PaymentStatus {
  UNPAID
  PAID
}
